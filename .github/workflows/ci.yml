name: Build and Publish to Release, GitHub Packages, and NuGet.org

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Project
      run: dotnet build --configuration Release

    - name: Package DLL for Release
      run: |
        mkdir release
        cp ./bin/Release/*.dll ./release/

    - name: Package NuGet
      run: dotnet pack --configuration Release -o ./packages

    - name: Archive DLL
      run: zip -r release.zip release

    - name: Upload DLL as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-dll
        path: release.zip

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload DLL to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release.zip
        asset_name: release.zip
        asset_content_type: application/zip

  publish-nuget:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Publish to NuGet.org
      run: dotnet nuget push ./packages/*.nupkg --source "https://api.nuget.org/v3/index.json" --api-key ${{ secrets.NUGET_API_KEY }}

    - name: Publish to GitHub Packages
      run: dotnet nuget push ./packages/*.nupkg --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
